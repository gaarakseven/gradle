/*
 * Copyright 2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import groovy.json.JsonSlurper
import org.gradle.testing.performance.generator.tasks.JvmProjectGeneratorTask

tasks.register("largeJavaProjectWithBuildScanPlugin", JvmProjectGeneratorTask) {
    doFirst {
        templateArgs.buildScanPluginVersion = {
            def pluginInfo = file("$rootDir/incoming/plugin.json")
            assert pluginInfo.exists()
            def json = new JsonSlurper().parse(pluginInfo) as Map<String, ?>
            assert json.versionNumber
            json.versionNumber
        }()
    }

    dependencyGraph {
        size = 200
        depth = 5
        useSnapshotVersions = false // snapshots should not have a build scan specific performance impact
    }

    buildSrcTemplate = 'buildsrc-plugins'
    projects = 250
    sourceFiles = 100
    testSourceFiles = 50 // verbose tests are time consuming
    filesPerPackage = 25
    linesOfCodePerSourceFile = 150
    rootProjectTemplates = ['root']
    subProjectTemplates = ['project-with-source']
    templateArgs = [fullTestLogging: true, failedTests: true, projectDependencies:true, manyPlugins:true, manyScripts:true]

    doLast {
        // generate script plugins
        def scriptPlugins = 30
        def nesting = 5
        def groupedScriptIds = ((1..scriptPlugins).groupBy{ it % ((int)(scriptPlugins/nesting))}.values())
        def gradleFolder =  new File(destDir, 'gradle')
        gradleFolder.mkdirs()
        (1..30).each { scriptPluginId ->
            def nestedScriptId = groupedScriptIds.find {it.contains(scriptPluginId)}.find { it > scriptPluginId }
            def maybeApplyNestedScript = nestedScriptId ? "apply from: \'../gradle/script-plugin${nestedScriptId}.gradle'" : ''
            new File(gradleFolder, "script-plugin${scriptPluginId}.gradle").text = """ 
                ${maybeApplyNestedScript}
            """
        }
    }
}
